{"version":3,"sources":["Layers.js","App.js","index.js"],"names":["renderLayers","props","data","points","PointCloudLayer","id","coordinateSystem","COORDINATE_SYSTEM","IDENTITY","numInstances","pointsCount","instancePositions","instanceColors","colors","getNormal","opacity","pointSize","INITIAL_VIEW_STATE","fovy","height","orbitAxis","position","rotationOrbit","rotationX","target","transitionDuration","width","zoom","App","_useState","useState","_useState2","Object","slicedToArray","viewport","setViewport","_useState3","_useState4","lasdata","setLasdata","useEffect","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","reslut","vertexCount","wrap","_context","prev","next","load","LASLoader","sent","header","attributes","POSITION","value","COLOR_0","stop","apply","this","arguments","fetchData","react_default","createElement","className","deckgl","views","OrbitView","viewState","controller","layers","parameters","clearColor","onViewStateChange","v","ReactDOM","render","src_App","document","getElementById"],"mappings":"+XAEO,SAASA,EAAaC,GAC5B,IAAMC,EAAOD,EAAMC,KACnB,OAAKA,GAASA,EAAKC,OAeZ,CAbYD,EAAKC,OACrB,IAAIC,IAAgB,CACpBC,GAAI,wBACJC,iBAAkBC,IAAkBC,SACpCC,aAAcP,EAAKQ,YACnBC,kBAAmBT,EAAKC,OACxBS,eAAgBV,EAAKW,OACrBC,UAAW,CAAE,EAAG,EAAG,GACnBC,QAAS,EACTC,UAAW,IAEX,IAb+B,GCInC,IAAMC,EAAqB,CAC1BC,KAAM,GACNC,OAAQ,KACRC,UAAW,IACXC,SAAU,CAAE,EAAG,EAAG,GAClBC,cAAe,kBACfC,UAAW,kBACXC,OAAQ,EAAG,mBAAoB,mBAAoB,oBACnDC,mBAAoB,EACpBC,MAAO,KACPC,KAAM,oBA8CQC,MA3Cf,WAAe,IAAAC,EACoBC,mBAASb,GAD7Bc,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACII,EADJJ,EAAA,GAAAK,EAEkBN,qBAFlBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEGE,EAFHF,EAAA,GAyBd,OArBAG,oBAAU,YACM,eAAAC,EAAAT,OAAAU,EAAA,EAAAV,CAAAW,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIC,YAAK,6BAA8BC,KADvC,OACXP,EADWG,EAAAK,KAITP,EAAgBD,EAAOS,OAAvBR,YACRT,EAAW,CACV7B,YAAasC,EACb7C,OAAQ4C,EAAOU,WAAWC,SAASC,MACnC9C,OAAQkC,EAAOU,WAAWG,QAAQD,QARlB,wBAAAT,EAAAW,SAAAf,MAAH,yBAAAL,EAAAqB,MAAAC,KAAAC,YAAA,EAafC,IACE,IAOFC,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,OACdF,EAAAtB,EAAAuB,cAACE,EAAA,EAAD,CACCC,MAAO,IAAIC,IACXC,UAAWtC,EACXuC,YAAY,EACZC,OAAQ1E,EAAa,CACpBE,KAAMoC,IAEPqC,WAAY,CACXC,WAAY,CAAE,IAAM,IAAM,IAAM,IAEjCC,kBAhBuB,SAACC,GAC1B3C,EAAY2C,EAAEN,gBCvChBO,IAASC,OAAOd,EAAAtB,EAAAuB,cAACc,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.485fb637.chunk.js","sourcesContent":["import  { COORDINATE_SYSTEM, PointCloudLayer } from 'deck.gl';\n\nexport function renderLayers(props) {\n\tconst data = props.data;\n\tif (!data || !data.points) return [];\n\n\tconst pointlayer = data.points\n\t\t? new PointCloudLayer({\n\t\t\t\tid: 'laz-point-cloud-layer',\n\t\t\t\tcoordinateSystem: COORDINATE_SYSTEM.IDENTITY,\n\t\t\t\tnumInstances: data.pointsCount,\n\t\t\t\tinstancePositions: data.points,\n\t\t\t\tinstanceColors: data.colors,\n\t\t\t\tgetNormal: [ 1, 1, 1 ],\n\t\t\t\topacity: 1,\n\t\t\t\tpointSize: 2\n\t\t\t})\n\t\t: [];\n\n\treturn [ pointlayer ];\n}\n","import React, { useEffect, useState } from 'react';\n\nimport DeckGL, { OrbitView } from 'deck.gl';\nimport { LASLoader } from '@loaders.gl/las';\nimport { load } from '@loaders.gl/core';\n\nimport { renderLayers } from './Layers.js';\n\nconst INITIAL_VIEW_STATE = {\n\tfovy: 50,\n\theight: 1176,\n\torbitAxis: 'Z',\n\tposition: [ 0, 0, 0 ],\n\trotationOrbit: 8.219084648588094,\n\trotationX: 0.7049608355091377,\n\ttarget: [ -64541.11565260632, -146767.10235869358, 15.396177578410983 ],\n\ttransitionDuration: 0,\n\twidth: 1364,\n\tzoom: 5.5068371397691935\n};\n\nfunction App() {\n\tconst [ viewport, setViewport ] = useState(INITIAL_VIEW_STATE);\n\tconst [ lasdata, setLasdata ] = useState();\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tconst reslut = await load('./data/30D7318011101-3.laz', LASLoader);\n\n\n\t\t\tconst { vertexCount } = reslut.header;\n\t\t\tsetLasdata({\n\t\t\t\tpointsCount: vertexCount,\n\t\t\t\tpoints: reslut.attributes.POSITION.value,\n\t\t\t\tcolors: reslut.attributes.COLOR_0.value\n\t\t\t});\n\n\t\t};\n\n\t\tfetchData();\n\t}, []);\n\n\tconst onViewStateChange = (v) => {\n\t\tsetViewport(v.viewState);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<DeckGL\n\t\t\t\tviews={new OrbitView()}\n\t\t\t\tviewState={viewport}\n\t\t\t\tcontroller={true}\n\t\t\t\tlayers={renderLayers({\n\t\t\t\t\tdata: lasdata\n\t\t\t\t})}\n\t\t\t\tparameters={{\n\t\t\t\t\tclearColor: [ 0.07, 0.14, 0.19, 1 ]\n\t\t\t\t}}\n\t\t\t\tonViewStateChange={onViewStateChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}